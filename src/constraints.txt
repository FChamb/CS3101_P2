C1:
CREATE TRIGGER trg_stop_arrival_check
BEFORE INSERT ON stop
FOR EACH ROW
BEGIN
    IF NEW.adh * 60 + NEW.adm > (SELECT dh * 60 + dm FROM service WHERE hc = NEW.hc) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Arrival time cannot be after departure time';
    END IF;
END;


C2:
CREATE TRIGGER trg_plan_diff_check
BEFORE INSERT ON plan
FOR EACH ROW
BEGIN
    IF NEW.ddh IS NULL OR NEW.ddm IS NULL THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Departure differential must be finite unless destination';
    END IF;
END;

C3:
CREATE TRIGGER trg_train_service_unique
BEFORE INSERT ON service
FOR EACH ROW
BEGIN
    IF EXISTS (
        SELECT * FROM service
        WHERE uid = NEW.uid AND dh = NEW.dh AND dm = NEW.dm
    ) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Train already used at that time';
    END IF;
END;


Q1:
CREATE VIEW trainLEV AS
SELECT s.hc, r.orig AS orig, CONCAT(s.dh, LPAD(s.dm, 2, '0')) AS dep
FROM service s
JOIN route r ON s.hc = r.hc
WHERE s.uid = 170406
ORDER BY s.dh, s.dm;

Q2:
CREATE VIEW scheduleEDB AS
SELECT s.hc, CONCAT(s.dh, LPAD(s.dm, 2, '0')) AS dep, s.pl,
       (SELECT p.loc FROM plan p WHERE p.hc = s.hc AND p.ddh = 'Ï‰') AS dest,
       (SELECT COUNT(*) FROM coach WHERE uid = s.uid) AS len,
       s.toc
FROM service s
JOIN route r ON s.hc = r.hc
WHERE r.orig = 'Edinburgh'
ORDER BY s.dh, s.dm;

Q3:
CREATE VIEW serviceEDBDEE AS
SELECT p.loc, st.code AS stn, stp.pl,
       CONCAT(s.dh + p.ddh, LPAD(s.dm + p.ddm, 2, '0')) AS arr,
       CONCAT(s.dh + p.ddh, LPAD(s.dm + p.ddm + 1, 2, '0')) AS dep
FROM plan p
JOIN service s ON s.hc = p.hc
LEFT JOIN stop stp ON stp.hc = p.hc AND stp.loc = p.loc
LEFT JOIN station st ON st.loc = p.loc
WHERE s.hc = '1L27' AND s.dh = 18 AND s.dm = 59
ORDER BY p.ddh, p.ddm;

P1:
DELIMITER //
CREATE PROCEDURE proc_new_service(IN orig VARCHAR(255), IN platform INT, IN dep TIME, IN train INT, IN toc_code VARCHAR(5))
BEGIN
    DECLARE new_hc CHAR(4);
    SET new_hc = CONCAT('1', 'L', LPAD(FLOOR(RAND() * 90 + 10), 2, '0'));

    INSERT INTO route(hc, orig) VALUES(new_hc, orig);
    INSERT INTO service(hc, dh, dm, pl, uid, toc)
    VALUES(new_hc, HOUR(dep), MINUTE(dep), platform, train, toc_code);
END;
//
DELIMITER ;

P2:
DELIMITER //
CREATE PROCEDURE proc_add_loc(
    IN hc CHAR(4), IN loc_name VARCHAR(255), IN prev_loc VARCHAR(255),
    IN ddh INT, IN ddm INT, IN adh INT, IN adm INT, IN platform INT)
BEGIN
    INSERT INTO plan(hc, frm, loc, ddh, ddm)
    VALUES(hc, prev_loc, loc_name, ddh, ddm);

    IF adh IS NOT NULL AND adm IS NOT NULL AND platform IS NOT NULL THEN
        INSERT INTO stop(hc, frm, loc, adh, adm, pl)
        VALUES(hc, prev_loc, loc_name, adh, adm, platform);
    END IF;
END;
//
DELIMITER ;
